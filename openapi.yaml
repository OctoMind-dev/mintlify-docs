openapi: 3.0.3
info:
  title: Octomind external  API
  description: Octomind API that allows you to execute test cases, fetch reports and register private location workers by providing a URL and an ID.
  version: 1.0.0
servers:
  - url: https://app.octomind.dev/api
    description: Main API Endpoint
components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key
  schemas:
    ExecutionContext:
      oneOf:
        - type: object
          properties:
            source:
              type: string
              enum: ["github"]
              example: "github"
            issueNumber:
              type: integer
              nullable: true
              example: 123
            ref:
              type: string
              nullable: true
              example: "refs/heads/main"
            sha:
              type: string
              nullable: true
              example: "abc123def456"
            repo:
              type: string
              example: "my-repo"
            owner:
              type: string
              example: "repo-owner"
            triggeredBy:
              type: object
              nullable: true
              properties:
                type:
                  type: string
                  enum: ["USER"]
                  example: "USER"
                userId:
                  type: string
                  example: "user123"
            nodeId:
              type: string
              nullable: true
              example: "node-123"

        - type: object
          properties:
            source:
              type: string
              enum: ["azureDevOps"]
              example: "azureDevOps"
            accessToken:
              type: string
              example: "token123"
            organization:
              type: string
              example: "my-org"
            project:
              type: string
              example: "my-project"
            repositoryId:
              type: string
              example: "repo-123"
            sha:
              type: string
              nullable: true
              example: "abc123def456"
            ref:
              type: string
              nullable: true
              example: "refs/heads/main"
            pullRequestId:
              type: integer
              nullable: true
              example: 101
            triggeredBy:
              type: object
              nullable: true
              properties:
                type:
                  type: string
                  enum: ["USER"]
                  example: "USER"
                userId:
                  type: string
                  example: "user123"
            threadId:
              type: string
              nullable: true
              example: "thread-123"

        - type: object
          properties:
            source:
              type: string
              enum: ["discovery"]
              example: "discovery"
            description:
              type: string
              example: "A discovery test"
            triggeredBy:
              oneOf:
                - type: object
                  properties:
                    type:
                      type: string
                      enum: ["INITIAL"]
                      example: "INITIAL"
                - type: object
                  properties:
                    type:
                      type: string
                      enum: ["USER"]
                      example: "USER"
                    userId:
                      type: string
                      example: "user123"

        - type: object
          properties:
            source:
              type: string
              enum: ["manual"]
              example: "manual"
            description:
              type: string
              example: "A manual trigger"
            triggeredBy:
              type: object
              properties:
                type:
                  type: string
                  enum: ["USER"]
                  example: "USER"
                userId:
                  type: string
                  example: "user123"

        - type: object
          properties:
            source:
              type: string
              enum: ["scheduled"]
              example: "scheduled"
            triggeredBy:
              type: object
              nullable: true
              properties:
                type:
                  type: string
                  enum: ["USER"]
                  example: "USER"
                userId:
                  type: string
                  example: "user123"

        - type: object
          properties:
            source:
              type: string
              enum: ["proposal"]
              example: "proposal"
            description:
              type: string
              example: "A proposal trigger"
            triggeredBy:
              oneOf:
                - type: object
                  properties:
                    type:
                      type: string
                      enum: ["INITIAL"]
                      example: "INITIAL"
                - type: object
                  properties:
                    type:
                      type: string
                      enum: ["USER"]
                      example: "USER"
                    userId:
                      type: string
                      example: "user123"

    TestTargetExecutionRequest:
      type: object
      properties:
        testTargetId:
          type: string
          format: uuid
          description: Unique identifier for the testTarget.
          example: "2e2bb27b-a19c-47ce-a9b6-cd1bd31622dc"
        url:
          type: string
          format: uri
          description: The URL of the test target for this run.
          example: "https://example.com"
        context:
          $ref: "#/components/schemas/ExecutionContext"
        environmentName:
          type: string
          format: environment name
          description: the environment name you want to run your test against
          default: default
      required:
        - testTargetId
        - url
        - context
    TestTargetExecutionResponse:
      type: object
      properties:
        testReportUrl:
          type: string
          description: The URL the test target was executed.
          example: "https://example.com"
        testReport:
          type: object
          description: The test report from the run.
          example: "some json"

    TestReportContext:
      type: object
      properties:
        source:
          type: string
          enum: ["manual"]
          description: The source of the test trigger.
          example: "manual"
        description:
          type: string
          description: The description of the test context.
          example: "manual trigger"
        triggeredBy:
          type: object
          properties:
            type:
              type: string
              enum: ["USER"]
              description: The type of entity triggering the test.
              example: "USER"
            userId:
              type: string
              format: uuid
              description: The unique identifier of the user who triggered the test.
              example: "2e2bb27b-a19c-47ce-a9b6-cd1bd31622dc"

    TestReport:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the test report.
          example: "826c15af-644b-4b28-89b4-f50ff34e46b7"
        testTargetId:
          type: string
          format: uuid
          description: The unique identifier of the test target.
          example: "3435918b-3d29-4ebd-8c68-9a540532f45a"
        createdAt:
          type: string
          format: date-time
          description: The timestamp when the test report was created.
          example: "2024-09-06T13:01:51.686Z"
        updatedAt:
          type: string
          format: date-time
          description: The timestamp when the test report was last updated.
          example: "2024-09-06T13:01:51.686Z"
        executionUrl:
          type: string
          format: uri
          description: The URL where the test execution was performed.
          example: "https://en.wikipedia.org/"
        status:
          type: string
          enum: ["WAITING", "PASSED", "FAILING"]
          description: The status of the test report, will be WAITING as long as any result is running, FAILED if the report is done but has any failed result and PASSED if all test results are done and successful
        context:
          $ref: "#/components/schemas/TestReportContext"

    TestReportResponse:
      type: object
      properties:
        testReportUrl:
          type: string
          format: uri
          description: The URL where the test report can be accessed.
          example: "https://app.octomind.dev/testreports/826c15af-644b-4b28-89b4-f50ff34e46b7"
        testReport:
          $ref: "#/components/schemas/TestReport"

    SuccessResponse:
      type: object
      properties:
        success:
          type: boolean
          description: Indicates whether the operation was successful.
          example: true

    UnregisterRequest:
      type: object
      properties:
        name:
          type: string
    RegisterRequest:
      type: object
      properties:
        name:
          type: string
        registrationData:
          type: object
          properties:
            proxypass:
              type: string
              example: secret22
            proxyuser:
              type: string
              example: user
            address:
              type: string
              description: the address of the remote endpoint. IP and port
              example: 34.45.23.22:23455
paths:
  /apiKey/v2/execute:
    post:
      summary: Execute all tests of the given test target with a given URL
      description: This endpoint triggers a test execution by sending an test target id and a URL.
      security:
        - ApiKeyAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TestTargetExecutionRequest"
      responses:
        "200":
          description: Test executed successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TestReportResponse"
        "400":
          description: Invalid request parameters
        "401":
          description: Invalid or missing API key
        "500":
          description: Internal server error

  /apiKey/v2/test-targets/{testTargetId}/test-reports/{testReportId}:
    get:
      summary: Retrieve information about a test report.
      description: Poll from within a CI-pipeline to wait for the completion of a report.
      parameters:
        - in: path
          name: testTargetId
          required: true
          schema:
            type: string
            format: uuid
          description: ID of the test target to which the test report belongs to
        - in: path
          name: testReportId
          required: true
          schema:
            type: string
            format: uuid
          description: ID of the test report to fetch
      security:
        - ApiKeyAuth: []
      responses:
        "200":
          description: Test Report information
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TestReport"
        "400":
          description: Invalid request parameters
        "401":
          description: Invalid or missing API key
        "500":
          description: Internal server error

  /apiKey/v1/private-location/register:
    put:
      security:
        - ApiKeyAuth: []
      summary: register a private location
      description: "registers a private location worker"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegisterRequest"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        "404":
          description: private location of that name not found
        "500":
          description: Internal server error

  /apiKey/v1/private-location/unregister:
    put:
      security:
        - ApiKeyAuth: []
      summary: unregister a private location
      description: "unregisters a private location worker"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UnregisterRequest"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        "404":
          description: private location of that name not found
        "500":
          description: Internal server error
